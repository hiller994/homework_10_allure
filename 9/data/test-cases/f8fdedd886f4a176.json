{"uid":"f8fdedd886f4a176","name":"test_github","fullName":"tests.draft.test_selene_lecture#test_github","historyId":"8d3aaeb4f05c0eb3fc9648f42b62c47a","time":{"start":1741436372182,"stop":1741436379243,"duration":7061},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nStacktrace:\n#0 0x55f6d863c14a <unknown>\n#1 0x55f6d80d9b80 <unknown>\n#2 0x55f6d811303f <unknown>\n#3 0x55f6d810ed7f <unknown>\n#4 0x55f6d815f819 <unknown>\n#5 0x55f6d815ed46 <unknown>\n#6 0x55f6d8150ca3 <unknown>\n#7 0x55f6d811cf08 <unknown>\n#8 0x55f6d811e071 <unknown>\n#9 0x55f6d8605b5b <unknown>\n#10 0x55f6d8609ae2 <unknown>\n#11 0x55f6d85f1967 <unknown>\n#12 0x55f6d860a6d4 <unknown>\n#13 0x55f6d85d5c7f <unknown>\n#14 0x55f6d862acd8 <unknown>\n#15 0x55f6d862aea9 <unknown>\n#16 0x55f6d863afc6 <unknown>\n#17 0x7f0bbf69caa4 <unknown>\n#18 0x7f0bbf729c3c <unknown>","statusTrace":"def test_github():\n        browser.config.window_height = 1080  # высота браузера\n        browser.config.window_width = 1920 # ширина браузера\n>       browser.open('https://github.com/')\n\ntests/draft/test_selene_lecture.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/_browser.py:93: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/configuration.py:263: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/configuration.py:178: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selene/core/configuration.py:66: in build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe9df1b96a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: probably user data d...\\\\n#16 0x55f6d863afc6 \\\\u003Cunknown>\\\\n#17 0x7f0bbf69caa4 \\\\u003Cunknown>\\\\n#18 0x7f0bbf729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: probably user data directory is already in use, please specify a unique value for --user-data-dir argument, or don't use --user-data-dir\nE       Stacktrace:\nE       #0 0x55f6d863c14a <unknown>\nE       #1 0x55f6d80d9b80 <unknown>\nE       #2 0x55f6d811303f <unknown>\nE       #3 0x55f6d810ed7f <unknown>\nE       #4 0x55f6d815f819 <unknown>\nE       #5 0x55f6d815ed46 <unknown>\nE       #6 0x55f6d8150ca3 <unknown>\nE       #7 0x55f6d811cf08 <unknown>\nE       #8 0x55f6d811e071 <unknown>\nE       #9 0x55f6d8605b5b <unknown>\nE       #10 0x55f6d8609ae2 <unknown>\nE       #11 0x55f6d85f1967 <unknown>\nE       #12 0x55f6d860a6d4 <unknown>\nE       #13 0x55f6d85d5c7f <unknown>\nE       #14 0x55f6d862acd8 <unknown>\nE       #15 0x55f6d862aea9 <unknown>\nE       #16 0x55f6d863afc6 <unknown>\nE       #17 0x7f0bbf69caa4 <unknown>\nE       #18 0x7f0bbf729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.draft"},{"name":"suite","value":"test_selene_lecture"},{"name":"host","value":"fv-az1719-655"},{"name":"thread","value":"2365-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.draft.test_selene_lecture"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f8fdedd886f4a176.json","parameterValues":[]}